typ iden = int
typ pob = [10] int
typ pp = ^pob
typ pep = { aa: int, bb:char, cc: pp}
fun exit():void
fun putChar(c:char):void
fun getChar():char
typ x = int
var aaa:int
var bbb:int
var ccc:int 
fun putInt(i:x):void =
    {   
        if (i<0) then {putChar('-'); i=-i; } else none;
        if (i==0) then putChar('0') else put(i);
    }
    where
    {
        fun put(i:int):void =
            {
                if (i==0) then none else {
                    put(i/10);
                    putChar(((i%10+('0':int)):char));
                };
            }
    }
fun getInt():int =
    {
        sign =1;
        val=0;
        c=getChar();
        if (c=='+') then { sign=+1; c='0'; } else
        if (c=='-') then { sign=-1; c='0'; } else
        if (c<'0')|(c>'9') then exit() else none;
        while ('0'<=c)&(c<='9') do {
            val = val*10 +((c:int)-('0':int));
            c=getChar();

        };
        if (c!=(10:char)) then exit() else none;
        sign*val;

    }
    where
    {
        var c:char
        var sign:int
        var val:int
    }

fun putString(s:^char):void =
    {
        i=0;
        while (((s:int)+(i*8):^char)^!=(0:char)) do {
            putChar(((s:int)+(i*8):^char)^);
            i=i+1;
        };
        none;
    }
    where
    {
        var i:int
    }

#-----------------------------------------------------------------------------------

fun queens(i:int, n:int, qs:^[32]int):int =
    {
        if i==n then
            {
                putString("SOLUTION");
                putChar((10:char));
                j=0;
                while j<n do {
                    i=0;
                    while i<n do {
                      putChar({if qs^[i]==j then c='0' else c='.'; c; }
                                where {var c:char});
                      i=i+1;
                    };
                    putChar((10:char));
                    j=j+1;
                };
                putChar((10:char));
                all=1;
            }
        else
            {
                all=0;
                j=0;
                while j<n do {
                    qs^[i]=j;
                    ok=true;
                    {
                        k=0;
                        while k<i do {
                            ok=ok&(qs^[k]!=qs^[i]);
                            ok=ok&(qs^[k]-qs^[i]!=k-i);
                            ok=ok&(qs^[k]-qs^[i]!=i-k);
                            k=k+1;
                        };
                    } where {var k:int };
                    if ok then all=all+queens(i+1, n, qs) else none;
                    j=j+1;
                };

            };
            all;

    }
    where
    {
        var j:int
        var ok:bool
        var all:int
    }
fun main():int =
    {
        n=getInt();
        n=queens(0, n, ^qs);
        putString("# ALL SOLUTIONS = ");
        putInt(n);
        putChar((10:char));
        putChar((10:char));
    }
    where
    {
        var n:int
        var qs:[32]int
    }