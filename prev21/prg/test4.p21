fun exit():void = none
fun putChar(c:char):void
fun getChar():char = (0:char)

typ integer=int
typ boolean=bool

fun putInteger(i:integer):void =
    {
      if (i<0) then { putChar('-'); i=-i; } else none;
      if (i==0) then putChar('0') else put(i);
    }
    where
    {
      fun put(i:integer):void =
          {
            if (i==0) then none else {
              put(i/10);
              putChar(((i%10+('0':integer)):char));
            };
          }
    }

fun getInteger():integer =
    {
      sign=1;
      val=0;
      c = getChar();
      if (c=='+') then { sign=+1; c='0'; } else
      if (c=='-') then { sign=-1; c='0'; } else
      if (c<'0')|(c>'9') then exit() else none;
      while ('0'<=c)&(c<='9') do {
        val=val*10+((c:integer)-('0':integer));
        c=getChar();
      };
      if (c!=(10:char)) then exit() else none;
      sign * val;
    }
    where
    {
      var sign:integer
      var val:integer
      var c:char
    }

fun putString(s:^char):void =
    {
      i=0;
      while (((s:integer)+(i*8):^char)^!=(0:char)) do {
        putChar(((s:integer)+(i*8):^char)^);
        i=i+1;
      };
      none;
    }
    where
    {
      var i:integer
    }

#---------------------------------------------------------------

fun queens(i:integer,n:integer,qs:^[32]integer):integer =
    {
      if i==n then
        {
          putString("SOLUTION");
          putChar((10:char));
          j=0;
          while j<n do {
            i=0;
            while i<n do {
              putChar({if qs^[i]==j then c='O' else c='.'; c; }
                      where { var c:char });
              i=i+1;
            };
            putChar((10:char));
            j=j+1;
          };
          putChar((10:char));
          all=1;
        }
      else
        {
          all=0;
          j=0;
          while j<n do {
            qs^[i]=j;
            ok=true;
            {
              k=0;
              while k<i do {
                ok=ok&(qs^[k]!=qs^[i]);
                ok=ok&(qs^[k]-qs^[i]!=k-i);
                ok=ok&(qs^[k]-qs^[i]!=i-k);
                k=k+1;
              };
            } where { var k:integer };
            if ok then all=all+queens(i+1,n,qs) else none;
            j=j+1;
          };
        };
      all;
    }
    where
    {
      var j:integer
      var ok:boolean
      var all:integer
    }

fun main():integer =
    {
      n=8;
      n=queens(0,n,^qs);
      putString("# ALL SOLUTIONS = ");
      putInteger(n);
      putChar((10:char));
      putChar((10:char));
      0;
    }
    where
    {
      var n:integer
      var qs:[32]integer
    }